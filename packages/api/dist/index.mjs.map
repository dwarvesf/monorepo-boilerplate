{"version":3,"sources":["../src/libs/fetcher.ts","../src/libs/emitter.ts","../src/libs/apis.ts"],"sourcesContent":["import fetch from 'isomorphic-unfetch'\nimport { emitter, EVENTS } from './emitter'\n\nexport type FetcherError = Error & { response: Response }\n\nexport default async function fetcher<JSON = any>(\n  input: RequestInfo,\n  init?: RequestInit,\n): Promise<JSON> {\n  const res = await fetch(input, init)\n  if (res.ok) {\n    const contentType = res.headers.get('content-type')\n\n    if (contentType && contentType.includes('application/json')) {\n      return res.json()\n    }\n\n    // FIXME: There are cases where we need a text response (e.g. CSV export)\n    // However trying to include the string return type might demand refactoring the whole\n    // api flow, so let's ignore this first\n    // @ts-ignore\n    return res.text()\n  }\n  const error = new Error(res.statusText) as FetcherError\n  const response = await res.json()\n  error.response = response\n  error.message = response.message\n\n  emitter.emit(EVENTS.API_ERROR, {\n    input,\n    status: res.status,\n    statusText: res.statusText,\n    response: res,\n  })\n\n  return Promise.reject(error)\n}\n","import mitt from 'mitt'\n\nexport const EVENTS = {\n  API_ERROR: 'API_ERROR',\n}\n\nexport const emitter = mitt()\n","import { User } from '../types/schema'\nimport fetcher from './fetcher'\n\n// keys for swr\nexport const GET_PATHS = {\n  getUsers: '/users',\n}\n\nclass Client {\n  private baseUrl: string\n\n  constructor(baseUrl = 'http://localhost:3000/api') {\n    this.baseUrl = baseUrl\n  }\n\n  headers: HeadersInit = {\n    'Content-Type': 'application/json',\n  }\n\n  getUsers() {\n    return fetcher<User[]>(`${this.baseUrl}/users`, {\n      headers: this.headers,\n    })\n  }\n}\n\nexport { Client }\n"],"mappings":";AAAA;;;ACAA;AAEO,IAAM,SAAS;AAAA,EACpB,WAAW;AACb;AAEO,IAAM,UAAU,KAAK;;;ADD5B,uBACE,OACA,MACe;AACf,QAAM,MAAM,MAAM,MAAM,OAAO,IAAI;AACnC,MAAI,IAAI,IAAI;AACV,UAAM,cAAc,IAAI,QAAQ,IAAI,cAAc;AAElD,QAAI,eAAe,YAAY,SAAS,kBAAkB,GAAG;AAC3D,aAAO,IAAI,KAAK;AAAA,IAClB;AAMA,WAAO,IAAI,KAAK;AAAA,EAClB;AACA,QAAM,QAAQ,IAAI,MAAM,IAAI,UAAU;AACtC,QAAM,WAAW,MAAM,IAAI,KAAK;AAChC,QAAM,WAAW;AACjB,QAAM,UAAU,SAAS;AAEzB,UAAQ,KAAK,OAAO,WAAW;AAAA,IAC7B;AAAA,IACA,QAAQ,IAAI;AAAA,IACZ,YAAY,IAAI;AAAA,IAChB,UAAU;AAAA,EACZ,CAAC;AAED,SAAO,QAAQ,OAAO,KAAK;AAC7B;;;AEhCO,IAAM,YAAY;AAAA,EACvB,UAAU;AACZ;AAEA,IAAM,SAAN,MAAa;AAAA,EAGX,YAAY,UAAU,6BAA6B;AAInD,mBAAuB;AAAA,MACrB,gBAAgB;AAAA,IAClB;AALE,SAAK,UAAU;AAAA,EACjB;AAAA,EAMA,WAAW;AACT,WAAO,QAAgB,GAAG,KAAK,iBAAiB;AAAA,MAC9C,SAAS,KAAK;AAAA,IAChB,CAAC;AAAA,EACH;AACF;","names":[]}